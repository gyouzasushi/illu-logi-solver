use illu_logi_solver::*;

#[test]
fn test_no_solution() {
    let mut solver = Solver::new([
        vec![vec![], vec![3, 1], vec![], vec![], vec![]],
        vec![vec![1, 3], vec![], vec![], vec![], vec![]],
    ]);
    let result = solver.solve();
    assert!(result.is_err());
    eprintln!("{solver}");
    eprintln!("{}", result.err().unwrap());

    let mut solver = Solver::new([
        vec![vec![5], vec![1], vec![], vec![], vec![]],
        vec![vec![5], vec![], vec![], vec![], vec![]],
    ]);
    let result = solver.solve();
    assert!(result.is_err());
    eprintln!("{solver}");
    eprintln!("{}", result.err().unwrap());
}

#[test]
fn test_5x5() {
    let mut solver = Solver::new([
        vec![vec![2, 1], vec![3], vec![2, 2], vec![1, 2], vec![1, 1]],
        vec![vec![3, 1], vec![4], vec![1, 1], vec![2], vec![1, 2]],
    ]);
    assert!(solver.solve().is_ok());
}
#[test]
fn test_10x10() {
    let mut solver = Solver::new([
        vec![
            vec![5, 1],
            vec![2, 3],
            vec![2, 2, 1],
            vec![3, 2, 2],
            vec![1, 3, 1],
            vec![2, 3],
            vec![1, 3, 1],
            vec![1, 1, 2, 2],
            vec![1, 6, 1],
            vec![5, 2],
        ],
        vec![
            vec![1, 2, 2],
            vec![7],
            vec![2, 1, 1, 2],
            vec![1, 1, 4],
            vec![2, 1, 1, 2],
            vec![9],
            vec![3, 1, 3],
            vec![3, 1],
            vec![1, 1, 1, 1],
            vec![2, 3],
        ],
    ]);
    assert!(solver.solve().is_ok());
}
#[test]
fn test_15x15() {
    let mut solver = Solver::new([
        vec![
            vec![2, 4, 5],
            vec![4, 1, 1],
            vec![3, 3, 1],
            vec![8, 1],
            vec![1, 3, 1, 5],
            vec![2, 2, 4],
            vec![1, 1, 1, 2, 1, 2],
            vec![1, 7, 2],
            vec![1, 1, 3],
            vec![5, 1, 2, 1, 1],
            vec![3, 4, 1],
            vec![1, 1, 1, 1, 1],
            vec![2, 6],
            vec![10, 1],
            vec![7, 2],
        ],
        vec![
            vec![1, 3, 2, 1],
            vec![1, 2, 1, 3, 2],
            vec![3, 2, 2, 2],
            vec![4, 1, 4],
            vec![2, 4, 1, 3],
            vec![2, 1, 2, 1, 2],
            vec![2, 1, 2, 2, 2],
            vec![4, 2, 1, 1],
            vec![3, 4, 2],
            vec![1, 1, 1, 1, 3],
            vec![1, 4, 3],
            vec![2, 3, 3, 1],
            vec![1, 1, 3, 1, 2],
            vec![1, 1, 3, 1],
            vec![2, 1, 1, 5],
        ],
    ]);
    assert!(solver.solve().is_ok());
}

#[test]
fn test_20x20() {
    let mut solver = Solver::new([
        vec![
            vec![2, 8, 3, 1],
            vec![2, 1, 2, 1, 3],
            vec![1, 2, 1, 2, 1, 4],
            vec![4, 5, 2, 3],
            vec![2, 3, 1, 2, 1, 2],
            vec![1, 3, 1, 2, 1, 6],
            vec![1, 3, 1, 4, 2],
            vec![1, 7, 1, 2],
            vec![3, 2, 4, 4, 1],
            vec![1, 11],
            vec![1, 2, 1, 1, 3, 1],
            vec![1, 1, 1, 2, 2],
            vec![2, 1, 2, 2, 2],
            vec![1, 1, 3, 2, 3],
            vec![1, 3, 1, 1, 1, 1],
            vec![2, 1, 3, 5, 1],
            vec![2, 6, 1, 3, 2],
            vec![1, 1, 2, 1, 1, 1],
            vec![3, 1, 1, 2, 1, 2, 1],
            vec![1, 1, 1, 1, 6],
        ],
        vec![
            vec![1, 4, 4, 4, 2],
            vec![2, 2, 1, 1, 2, 1],
            vec![3, 1, 1, 1, 2, 2],
            vec![5, 1, 1, 1],
            vec![1, 3, 1, 1, 6],
            vec![1, 3, 3, 1, 2, 1, 1],
            vec![1, 1, 1, 1, 1, 2, 2, 1],
            vec![1, 2, 2, 3],
            vec![1, 1, 1, 2, 1, 5],
            vec![2, 1, 5, 1, 2],
            vec![3, 1, 4, 1, 2],
            vec![1, 9, 2, 1, 1],
            vec![1, 1, 1, 1, 6, 2],
            vec![1, 1, 4, 2, 1],
            vec![1, 1, 3, 5, 4, 1],
            vec![1, 2, 5, 1, 1],
            vec![4, 1, 2, 2],
            vec![5, 1, 2, 2],
            vec![6, 3, 3, 1],
            vec![1, 1, 3, 1, 2, 1],
        ],
    ]);
    assert!(solver.solve().is_ok());
}
#[test]
fn test_30x30() {
    let mut solver = Solver::new([
        vec![
            vec![4, 3],
            vec![1, 3, 1, 3],
            vec![1, 2, 1, 1],
            vec![2, 2, 3, 1, 1],
            vec![1, 1, 1, 9, 3],
            vec![1, 2, 2, 2, 7, 1],
            vec![1, 5, 2, 2, 5, 1],
            vec![1, 1, 1, 1, 1, 1, 1, 5, 1],
            vec![1, 1, 1, 1, 1, 1, 5],
            vec![2, 1, 1, 2, 2, 1, 2, 1],
            vec![3, 3, 1, 1, 3, 1],
            vec![1, 4, 1, 1, 5, 1],
            vec![3, 4, 1, 1, 5],
            vec![1, 1, 3, 1, 1, 2, 2],
            vec![1, 1, 2, 1, 4, 2],
            vec![2, 6, 1, 1, 2, 3, 1],
            vec![2, 9, 2, 2, 2, 1],
            vec![4, 12, 2, 4],
            vec![14, 1, 2, 4],
            vec![8, 5, 1, 3, 4, 1],
            vec![1, 1, 4, 4, 1, 2, 3, 3, 1],
            vec![2, 6, 2, 3, 2, 1],
            vec![9, 3, 1, 3, 2, 1],
            vec![5, 1, 2, 4, 2, 8],
            vec![6, 4, 3, 3],
            vec![1, 1, 7, 3, 3],
            vec![2, 9, 3],
            vec![4, 1, 6, 3],
            vec![4, 2, 1, 6],
            vec![6, 5],
        ],
        vec![
            vec![3, 6],
            vec![3, 2, 3, 6],
            vec![2, 2, 1, 6, 3, 2],
            vec![1, 1, 2, 2, 6, 5, 2],
            vec![1, 4, 3, 8, 3],
            vec![1, 1, 1, 5, 6],
            vec![1, 4, 4, 7, 2, 2],
            vec![2, 1, 2, 3, 8, 4, 1],
            vec![3, 2, 3, 4, 6, 2],
            vec![2, 3, 5, 6, 7],
            vec![1, 7, 2, 6, 4, 1],
            vec![1, 2, 2, 6, 1, 4],
            vec![1, 3, 3, 6, 1, 2, 1],
            vec![1, 6, 4, 2, 3],
            vec![5, 5, 3, 3],
            vec![1, 2, 4, 2, 4, 1, 2],
            vec![1, 3, 2, 2, 2, 2],
            vec![1, 5, 2, 1, 3, 1],
            vec![1, 3, 3, 2, 3, 2],
            vec![2, 2, 1, 4, 2],
            vec![1, 3, 2, 2, 7],
            vec![1, 5, 2, 7],
            vec![1, 4, 2, 1, 4],
            vec![3, 3, 2, 2, 1],
            vec![1, 4, 1, 1],
            vec![1, 4, 3, 2],
            vec![3, 10],
            vec![2, 4, 2, 1],
            vec![2, 2, 1],
            vec![4, 3],
        ],
    ]);
    assert!(solver.solve().is_ok());
}
#[test]
fn test_30x30_2() {
    let mut solver = Solver::new([
        vec![
            vec![3, 5, 14, 1],
            vec![2, 2, 2, 4, 7, 1],
            vec![2, 1, 1, 7, 3, 1],
            vec![3, 1, 1, 3, 3, 3, 3],
            vec![2, 1, 1, 2, 1, 2, 5, 2],
            vec![4, 2, 2, 4, 4, 4, 1],
            vec![3, 10, 4],
            vec![1, 1, 1, 3, 1, 1, 9, 3],
            vec![2, 1, 1, 1, 2, 8, 2],
            vec![2, 4, 4, 5, 4],
            vec![4, 5, 12],
            vec![4, 12],
            vec![1, 1, 7, 3],
            vec![3, 5, 1, 2],
            vec![3, 4, 3],
            vec![2, 7],
            vec![2, 1, 1, 6, 1],
            vec![3, 1, 1, 5, 1],
            vec![2, 2, 1, 4, 1],
            vec![1, 2, 1, 1, 3, 2],
            vec![4, 2, 1, 2, 2],
            vec![3, 1, 1, 2, 1, 1, 3],
            vec![10, 1, 4],
            vec![4, 1, 1, 6],
            vec![8, 1, 6, 1],
            vec![4, 2, 2, 6],
            vec![8, 1, 1, 2, 3, 4],
            vec![3, 8, 2, 3],
            vec![8, 2, 1, 8],
            vec![3, 1, 1, 1, 3],
        ],
        vec![
            vec![4, 3, 9, 3, 2],
            vec![7, 4, 6, 3, 1, 2],
            vec![1, 4, 1, 5, 2, 5, 2],
            vec![2, 1, 1, 3, 2, 3, 1, 1],
            vec![1, 2, 6, 1],
            vec![2, 1, 1, 2, 5, 1],
            vec![1, 1, 1, 2, 1, 2, 3, 1],
            vec![1, 1, 1, 2, 1, 3, 1],
            vec![1, 2, 1, 4, 1, 2],
            vec![1, 1, 1, 4, 3],
            vec![1, 1, 1, 2, 1, 2],
            vec![2, 1, 1, 2, 1],
            vec![1, 2, 1, 1, 1],
            vec![2, 1, 1, 1, 2, 7],
            vec![1, 4, 1, 2, 5, 3],
            vec![7, 5, 1, 1],
            vec![4, 3, 5],
            vec![3, 1, 8, 2],
            vec![4, 10],
            vec![1, 14, 2],
            vec![9, 7, 3],
            vec![3, 8, 5, 4],
            vec![2, 2, 6, 1, 7, 3, 1],
            vec![2, 2, 7, 7, 1, 1],
            vec![2, 3, 13, 3, 1],
            vec![3, 3, 8, 3, 1],
            vec![3, 5, 5, 1],
            vec![1, 2, 4, 7, 1],
            vec![1, 2, 2, 5, 3, 1],
            vec![1, 4, 12, 1],
        ],
    ]);
    assert!(solver.solve().is_ok());
}

#[test]
fn test_15x20() {
    let mut solver = Solver::new([
        vec![
            vec![1, 16],
            vec![1, 1, 4, 3, 2],
            vec![1, 1, 3, 3, 1],
            vec![1, 2, 9],
            vec![3, 2, 2, 2],
            vec![5, 5, 3],
            vec![3, 3, 7],
            vec![5, 2, 3, 6],
            vec![3, 1, 4, 6],
            vec![5, 2, 3],
            vec![3, 5, 6],
            vec![5, 5, 5],
            vec![3, 4, 2, 4],
            vec![5, 3, 4, 3],
            vec![3, 14],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
        ],
        vec![
            vec![3, 1, 1, 1, 1, 1],
            vec![11],
            vec![14],
            vec![11],
            vec![3, 1, 1, 1, 1, 1],
            vec![4],
            vec![9, 4],
            vec![2, 4, 5],
            vec![1, 2, 6],
            vec![1, 1, 5, 1],
            vec![2, 2, 2, 2, 1],
            vec![5, 3, 1, 2],
            vec![4, 3, 3],
            vec![1, 2, 2, 3],
            vec![1, 1, 4, 1, 2],
            vec![1, 1, 4, 2, 1],
            vec![1, 1, 3, 3, 1],
            vec![1, 1, 9],
            vec![2, 2, 8],
            vec![5, 8],
        ],
    ]);
    assert!(solver.solve().is_ok());
    eprintln!("{solver}");
}
